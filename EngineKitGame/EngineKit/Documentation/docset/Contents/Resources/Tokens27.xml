<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSArray+ObjectiveSugar.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSArray(ObjectiveSugar)</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
            
			
			<NodeRef refid="27"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/first</TokenIdentifier>
			<Abstract type="html">The first item in the array, or nil.</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (id)first</Declaration>
			
			<ReturnValue><Abstract type="html">The first item in the array, or nil.</Abstract></ReturnValue>
			<Anchor>//api/name/first</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/last</TokenIdentifier>
			<Abstract type="html">The last item in the array, or nil.</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (id)last</Declaration>
			
			<ReturnValue><Abstract type="html">The last item in the array, or nil.</Abstract></ReturnValue>
			<Anchor>//api/name/last</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/sample</TokenIdentifier>
			<Abstract type="html">A random element in the array, or nil.</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (id)sample</Declaration>
			
			<ReturnValue><Abstract type="html">A random element in the array, or nil.</Abstract></ReturnValue>
			<Anchor>//api/name/sample</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/anyObject</TokenIdentifier>
			<Abstract type="html">Alias for sample</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (id)anyObject</Declaration>
			
			
			<Anchor>//api/name/anyObject</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/objectForKeyedSubscript:</TokenIdentifier>
			<Abstract type="html">Allow subscripting to fetch elements within the specified range</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (id)objectForKeyedSubscript:(id&lt;NSCopying&gt;)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">An NSString or NSValue wrapping an NSRange. It&apos;s intended to behave like Ruby&apos;s array range accessors.

        Given array of 10 elements, e.g. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], you can perform these operations:
        array[@&quot;1..3&quot;] will give you [2, 3, 4]
        array[@&quot;1...3&quot;] will give you [2, 3] (last value excluded)
        array[@&quot;1,3&quot;] implies NSRange(location: 1, length: 3), and gives you [2, 3, 4]</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array with elements within the specified range</Abstract></ReturnValue>
			<Anchor>//api/name/objectForKeyedSubscript:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/each:</TokenIdentifier>
			<Abstract type="html">A simpler alias for enumerateObjectsUsingBlock</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (void)each:(void ( ^ ) ( id object ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block with the object in its arguments.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/each:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/eachWithIndex:</TokenIdentifier>
			<Abstract type="html">A simpler alias for enumerateObjectsUsingBlock which also passes in an index</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (void)eachWithIndex:(void ( ^ ) ( id object , NSUInteger index ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block with the object in its arguments.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/eachWithIndex:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/each:options:</TokenIdentifier>
			<Abstract type="html">A simpler alias for enumerateObjectsWithOptions:usingBlock:</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (void)each:(void ( ^ ) ( id object ))block options:(NSEnumerationOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block with the object in its arguments.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">Enumerating options.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/each:options:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/eachWithIndex:options:</TokenIdentifier>
			<Abstract type="html">A simpler alias for enumerateObjectsWithOptions:usingBlock: which also passes in an index</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (void)eachWithIndex:(void ( ^ ) ( id object , NSUInteger index ))block options:(NSEnumerationOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block with the object in its arguments.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">Enumerating options.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/eachWithIndex:options:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/includes:</TokenIdentifier>
			<Abstract type="html">An alias for containsObject</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (BOOL)includes:(id)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object that the array may or may not contain.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/includes:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/take:</TokenIdentifier>
			<Abstract type="html">Take the first numberOfElements out of the array, or the maximum amount of
elements if it is less.</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)take:(NSUInteger)numberOfElements</Declaration>
			<Parameters>
				<Parameter>
					<Name>numberOfElements</Name>
					<Abstract type="html">Number of elements to take from array</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array of elements</Abstract></ReturnValue>
			<Anchor>//api/name/take:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/takeWhile:</TokenIdentifier>
			<Abstract type="html">Passes elements to the block until the block returns NO,
then stops iterating and returns an array of all prior elements.</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)takeWhile:(BOOL ( ^ ) ( id object ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block that returns YES/NO</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array of elements</Abstract></ReturnValue>
			<Anchor>//api/name/takeWhile:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/map:</TokenIdentifier>
			<Abstract type="html">Iterate through the current array running the block on each object and
returning an array of the changed objects.</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)map:(id ( ^ ) ( id object ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block that passes in each object and returns a modified object</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array of modified elements</Abstract></ReturnValue>
			<Anchor>//api/name/map:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/select:</TokenIdentifier>
			<Abstract type="html">Iterate through current array asking whether to keep each element.</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)select:(BOOL ( ^ ) ( id object ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block that returns YES/NO for whether the object should stay</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array of elements selected</Abstract></ReturnValue>
			<Anchor>//api/name/select:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/detect:</TokenIdentifier>
			<Abstract type="html">Iterate through current array returning the first element meeting a criteria.</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (id)detect:(BOOL ( ^ ) ( id object ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block that returns YES/NO</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The first matching element</Abstract></ReturnValue>
			<Anchor>//api/name/detect:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/find:</TokenIdentifier>
			<Abstract type="html">Alias for detect. Iterate through current array returning the first element
meeting a criteria.</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (id)find:(BOOL ( ^ ) ( id object ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block that returns YES/NO</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The first matching element</Abstract></ReturnValue>
			<Anchor>//api/name/find:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/reject:</TokenIdentifier>
			<Abstract type="html">Iterate through current array asking whether to remove each element.</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)reject:(BOOL ( ^ ) ( id object ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block that returns YES/NO for whether the object should be removed</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array of elements not rejected</Abstract></ReturnValue>
			<Anchor>//api/name/reject:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/flatten</TokenIdentifier>
			<Abstract type="html">Recurse through self checking for NSArrays and extract all elements into one single array</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)flatten</Declaration>
			
			<ReturnValue><Abstract type="html">An array of all held arrays merged</Abstract></ReturnValue>
			<Anchor>//api/name/flatten</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/compact</TokenIdentifier>
			<Abstract type="html">Remove all the nulls from array</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)compact</Declaration>
			
			<ReturnValue><Abstract type="html">A copy of the given array without NSNulls</Abstract></ReturnValue>
			<Anchor>//api/name/compact</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/join</TokenIdentifier>
			<Abstract type="html">Alias for componentsJoinedByString with a default of no seperator</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSString *)join</Declaration>
			
			<ReturnValue><Abstract type="html">A string of all objects joined with an empty string</Abstract></ReturnValue>
			<Anchor>//api/name/join</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/join:</TokenIdentifier>
			<Abstract type="html">Alias for componentsJoinedByString</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSString *)join:(NSString *)separator</Declaration>
			
			<ReturnValue><Abstract type="html">A string of all objects joined with the seperator string</Abstract></ReturnValue>
			<Anchor>//api/name/join:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/sort</TokenIdentifier>
			<Abstract type="html">Run the default comparator on each object in the array</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)sort</Declaration>
			
			<ReturnValue><Abstract type="html">A sorted copy of the array</Abstract></ReturnValue>
			<Anchor>//api/name/sort</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/sortBy:</TokenIdentifier>
			<Abstract type="html">Sorts the array using the the default comparator on the given key</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)sortBy:(NSString *)key</Declaration>
			
			<ReturnValue><Abstract type="html">A sorted copy of the array</Abstract></ReturnValue>
			<Anchor>//api/name/sortBy:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/reverse</TokenIdentifier>
			<Abstract type="html">Alias for reverseObjectEnumerator.allObjects</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)reverse</Declaration>
			
			
			<Anchor>//api/name/reverse</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/intersectionWithArray:</TokenIdentifier>
			<Abstract type="html">Return all the objects that are in both self and array.
Alias for Ruby&apos;s &amp;amp; operator</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)intersectionWithArray:(NSArray *)array</Declaration>
			
			<ReturnValue><Abstract type="html">An array of objects common to both arrays</Abstract></ReturnValue>
			<Anchor>//api/name/intersectionWithArray:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/unionWithArray:</TokenIdentifier>
			<Abstract type="html">Return all the objects that in both self and array combined.
Alias for Ruby&apos;s | operator</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)unionWithArray:(NSArray *)array</Declaration>
			
			<ReturnValue><Abstract type="html">An array of the two arrays combined</Abstract></ReturnValue>
			<Anchor>//api/name/unionWithArray:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/relativeComplement:</TokenIdentifier>
			<Abstract type="html">Return all the objects in self that are not in array.
Alias for Ruby&apos;s - operator</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)relativeComplement:(NSArray *)array</Declaration>
			
			<ReturnValue><Abstract type="html">An array of the self without objects in array</Abstract></ReturnValue>
			<Anchor>//api/name/relativeComplement:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/symmetricDifference:</TokenIdentifier>
			<Abstract type="html">Return all the objects that are unique to each array individually
Alias for Ruby&apos;s ^ operator. Equivalent of a - b | b - a</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)symmetricDifference:(NSArray *)array</Declaration>
			
			<ReturnValue><Abstract type="html">An array of elements which are in either of the arrays and not in their intersection.</Abstract></ReturnValue>
			<Anchor>//api/name/symmetricDifference:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/reduce:</TokenIdentifier>
			<Abstract type="html">Return a single value from an array by iterating through the elements and transforming a running total.</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (id)reduce:(id ( ^ ) ( id accumulator , id object ))block</Declaration>
			
			<ReturnValue><Abstract type="html">A single value that is the end result of apply the block function to each element successively.
*</Abstract></ReturnValue>
			<Anchor>//api/name/reduce:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/reduce:withBlock:</TokenIdentifier>
			<Abstract type="html">Same as -reduce, with initial value provided by yourself
*</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (id)reduce:(id)initial withBlock:(id ( ^ ) ( id accumulator , id object ))block</Declaration>
			
			
			<Anchor>//api/name/reduce:withBlock:</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSArray/unique</TokenIdentifier>
			<Abstract type="html">Produces a duplicate-free version of the array</Abstract>
			<DeclaredIn>NSArray+ObjectiveSugar.h</DeclaredIn>
			
			<Declaration>- (NSArray *)unique</Declaration>
			
			<ReturnValue><Abstract type="html">a new array with all unique elements
*</Abstract></ReturnValue>
			<Anchor>//api/name/unique</Anchor>
            <NodeRef refid="27"/>
		</Token>
		
        
        
	</File>
</Tokens>