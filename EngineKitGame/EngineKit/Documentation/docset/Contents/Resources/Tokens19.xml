<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/Shape.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/Shape</TokenIdentifier>
			<Abstract type="html">An abstract subclass of @p Item, representing geometric objects. All physical
visible objects, such as @p Spheres and @p Boxes, are subclasses of @p Shape.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
            
			
			<NodeRef refid="19"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Shape/assertTheresNoPhysicsBody</TokenIdentifier>
			<Abstract type="html">Used internally to make sure the Shape&apos;s dimensions won&apos;t change after we&apos;ve
already calculated the physics information.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>- (void)assertTheresNoPhysicsBody</Declaration>
			
			
			<Anchor>//api/name/assertTheresNoPhysicsBody</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Shape/copyPhysicsTo:</TokenIdentifier>
			<Abstract type="html">Similar to copyInfoTo:, meant to be used in the same context. copyInfoTo:
copies information that should be available @b before subclasses can copy their
info, while -copyPhysicsTo: copies the physics body, which should usually be
the last thing. Ideally, a subclass of shape should have the following
implementation (or something similar):
@code
- (Item *)deepCopy {
     Shape *newItem = [[self class] new];
     [self copyInfoTo:newItem];
     [super copyPhysicsTo:newItem];
     return newItem;
}
@endcode
considering that the subclass&apos;s copyInfoTo: method should follow convention
and call its super&apos;s copyInfoTo: method before doing anything else.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>- (void)copyPhysicsTo:(Shape *)item</Declaration>
			<Parameters>
				<Parameter>
					<Name>item</Name>
					<Abstract type="html">The item that will receive a copy of the receiver&apos;s physics
properties.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/copyPhysicsTo:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Shape/setColor:</TokenIdentifier>
			<Abstract type="html">An easy setter for the @p Shape&apos;s @p node&apos;s  @p geometry&apos;s @p materials. It
creates an @p SCNMaterial and sets it as the @p geometry&apos;s only @p material, so
that the object will have the given @p color. It accepts any object that would
be accepted by @p Color&apos;s  @p +colorWithObject: method. The getter should never
be used, since there is no guarantee the geometry&apos;s materials will still be
colors.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id color</Declaration>
			
			
			<Anchor>//api/name/color</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Shape/color</TokenIdentifier>
			<Abstract type="html">An easy setter for the @p Shape&apos;s @p node&apos;s  @p geometry&apos;s @p materials. It
creates an @p SCNMaterial and sets it as the @p geometry&apos;s only @p material, so
that the object will have the given @p color. It accepts any object that would
be accepted by @p Color&apos;s  @p +colorWithObject: method. The getter should never
be used, since there is no guarantee the geometry&apos;s materials will still be
colors.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id color</Declaration>
			
			
			<Anchor>//api/name/color</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Shape/color</TokenIdentifier>
			<Abstract type="html">An easy setter for the @p Shape&apos;s @p node&apos;s  @p geometry&apos;s @p materials. It
creates an @p SCNMaterial and sets it as the @p geometry&apos;s only @p material, so
that the object will have the given @p color. It accepts any object that would
be accepted by @p Color&apos;s  @p +colorWithObject: method. The getter should never
be used, since there is no guarantee the geometry&apos;s materials will still be
colors.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id color</Declaration>
			
			
			<Anchor>//api/name/color</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Shape/setPhysics:</TokenIdentifier>
			<Abstract type="html">The physics body type for the given item. This property @b must be set after
all the Shape&apos;s dimensions have been set. This means that after getting a @p
physics object, the Shape&apos;s scale property (as well as others such as height,
radius, etc) will be locked and will trigger assert&apos;s if set.
Supports only NSStrings: &quot;dynamic&quot;, &quot;static&quot; and &quot;kinematic&quot;.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id physics</Declaration>
			
			
			<Anchor>//api/name/physics</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Shape/physics</TokenIdentifier>
			<Abstract type="html">The physics body type for the given item. This property @b must be set after
all the Shape&apos;s dimensions have been set. This means that after getting a @p
physics object, the Shape&apos;s scale property (as well as others such as height,
radius, etc) will be locked and will trigger assert&apos;s if set.
Supports only NSStrings: &quot;dynamic&quot;, &quot;static&quot; and &quot;kinematic&quot;.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id physics</Declaration>
			
			
			<Anchor>//api/name/physics</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Shape/physics</TokenIdentifier>
			<Abstract type="html">The physics body type for the given item. This property @b must be set after
all the Shape&apos;s dimensions have been set. This means that after getting a @p
physics object, the Shape&apos;s scale property (as well as others such as height,
radius, etc) will be locked and will trigger assert&apos;s if set.
Supports only NSStrings: &quot;dynamic&quot;, &quot;static&quot; and &quot;kinematic&quot;.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id physics</Declaration>
			
			
			<Anchor>//api/name/physics</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Shape/setPhysicsBody:</TokenIdentifier>
			<Abstract type="html">An alias for this Shape&apos;s node&apos;s physicsBody property.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SCNPhysicsBody *physicsBody</Declaration>
			
			
			<Anchor>//api/name/physicsBody</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Shape/physicsBody</TokenIdentifier>
			<Abstract type="html">An alias for this Shape&apos;s node&apos;s physicsBody property.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SCNPhysicsBody *physicsBody</Declaration>
			
			
			<Anchor>//api/name/physicsBody</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Shape/physicsBody</TokenIdentifier>
			<Abstract type="html">An alias for this Shape&apos;s node&apos;s physicsBody property.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SCNPhysicsBody *physicsBody</Declaration>
			
			
			<Anchor>//api/name/physicsBody</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Shape/setVelocity:</TokenIdentifier>
			<Abstract type="html">An alias for this Shape&apos;s node&apos;s physicsBody&apos;s velocity property. If the setter
receives an NSNumber, it tries to scale the current velocity so that it has
that norm. Otherwise, it tries to instantiate a Vector using the given object.
The getter always returns a Vector object obtained from the physicsBody&apos;s
original property.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id velocity</Declaration>
			
			
			<Anchor>//api/name/velocity</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Shape/velocity</TokenIdentifier>
			<Abstract type="html">An alias for this Shape&apos;s node&apos;s physicsBody&apos;s velocity property. If the setter
receives an NSNumber, it tries to scale the current velocity so that it has
that norm. Otherwise, it tries to instantiate a Vector using the given object.
The getter always returns a Vector object obtained from the physicsBody&apos;s
original property.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id velocity</Declaration>
			
			
			<Anchor>//api/name/velocity</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Shape/velocity</TokenIdentifier>
			<Abstract type="html">An alias for this Shape&apos;s node&apos;s physicsBody&apos;s velocity property. If the setter
receives an NSNumber, it tries to scale the current velocity so that it has
that norm. Otherwise, it tries to instantiate a Vector using the given object.
The getter always returns a Vector object obtained from the physicsBody&apos;s
original property.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id velocity</Declaration>
			
			
			<Anchor>//api/name/velocity</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Shape/setMaterials:</TokenIdentifier>
			<Abstract type="html">An alias for this Shape&apos;s node&apos;s material property. Used mainly for storing and
resetting the materials in JavaScript.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id materials</Declaration>
			
			
			<Anchor>//api/name/materials</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Shape/materials</TokenIdentifier>
			<Abstract type="html">An alias for this Shape&apos;s node&apos;s material property. Used mainly for storing and
resetting the materials in JavaScript.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id materials</Declaration>
			
			
			<Anchor>//api/name/materials</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Shape/materials</TokenIdentifier>
			<Abstract type="html">An alias for this Shape&apos;s node&apos;s material property. Used mainly for storing and
resetting the materials in JavaScript.</Abstract>
			<DeclaredIn>Shape.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id materials</Declaration>
			
			
			<Anchor>//api/name/materials</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Shape/deepCopy</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>Shape.m</DeclaredIn>
			
			<Declaration>- (Item *)deepCopy</Declaration>
			
			
			<Anchor>//api/name/deepCopy</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Shape/copyInfoTo:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>Shape.m</DeclaredIn>
			
			<Declaration>- (void)copyInfoTo:(Shape *)item</Declaration>
			
			
			<Anchor>//api/name/copyInfoTo:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
        
        
	</File>
</Tokens>