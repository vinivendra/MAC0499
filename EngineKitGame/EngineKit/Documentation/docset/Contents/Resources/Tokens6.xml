<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/Contact.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/Contact</TokenIdentifier>
			<Abstract type="html">The Contact class represents an object meant to manage contact events between
two Items. Whenever a contact is detected, the Physics singleton is responsible
for checking if the corresponding Contact object exists; the Contact object
itself is then responsible for firing a callback function in JavaScript.</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
            
			
			<NodeRef refid="6"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Contact/registerContact:</TokenIdentifier>
			<Abstract type="html">Registers a contact so that its action may be activated on demand.</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>+ (void)registerContact:(id)contact</Declaration>
			<Parameters>
				<Parameter>
					<Name>contact</Name>
					<Abstract type="html">The Contact object to register, or an object that may be used
with the Contact class&apos;s @p -initWithObject.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerContact:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Contact/triggerActionForContact:</TokenIdentifier>
			<Abstract type="html">Triggers an action for some specific type of contact, if it has been
registered.</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>+ (void)triggerActionForContact:(SCNPhysicsContact *)physicsContact</Declaration>
			<Parameters>
				<Parameter>
					<Name>physicsContact</Name>
					<Abstract type="html">The contact whose corresponding action must be triggered.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/triggerActionForContact:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Contact/initWithFirstItem:secondItem:action:</TokenIdentifier>
			<Abstract type="html">Creates a Contact object ready to handle a contacts between the first and
second
Items using the JSValue action.</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithFirstItem:(Item *)firstItem secondItem:(Item *)secondItem action:(JSValue *)action</Declaration>
			<Parameters>
				<Parameter>
					<Name>firstItem</Name>
					<Abstract type="html">One of the Items involved in the contacts.</Abstract>
				</Parameter><Parameter>
					<Name>secondItem</Name>
					<Abstract type="html">The other Item involved in the contacts.</Abstract>
				</Parameter><Parameter>
					<Name>action</Name>
					<Abstract type="html">A JSValue representing a function in JavaScript code that
will be called when contact is detected.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized instance of Contact.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithFirstItem:secondItem:action:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Contact/initWithArray:</TokenIdentifier>
			<Abstract type="html">Creates a Contact based on the given array. The array should have the firstItem
in its first position, the secondItem in its second position and the action in
its third position - everything else is ignored.</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithArray:(NSArray *)array</Declaration>
			<Parameters>
				<Parameter>
					<Name>array</Name>
					<Abstract type="html">The array with the Contact&apos;s info.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized instance of Contact.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithArray:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Contact/initWithDictionary:</TokenIdentifier>
			<Abstract type="html">Creates a Contact based on the given dictionary. The dictionary should have the
firstItem in its &quot;between&quot; key, the secondItem in its &quot;and&quot; key and the action
in its &quot;contact&quot; key - everything else is ignored. Ideally, it would be used by
JavaScript in this way:</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithDictionary:(NSDictionary *)dictionary</Declaration>
			<Parameters>
				<Parameter>
					<Name>dictionary</Name>
					<Abstract type="html">The dictionary with the Contact&apos;s info.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized instance of Contact.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithDictionary:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Contact/initWithObject:</TokenIdentifier>
			<Abstract type="html">Attempts to create a Contact with the given object. This method accepts
NSArrays (which are initialized using @p -initWithArray) and NSDictionaries
(which are initialized using @p -initWithDictionary).</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithObject:(id)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object with the Contact&apos;s info.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized instance of Contact.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithObject:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Contact/contactWithFirstItem:secondItem:action:</TokenIdentifier>
			<Abstract type="html">Creates a Contact object ready to handle a contacts between the first and
second
Items using the JSValue action.</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>- (instancetype)contactWithFirstItem:(Item *)firstItem secondItem:(Item *)secondItem action:(JSValue *)action</Declaration>
			<Parameters>
				<Parameter>
					<Name>firstItem</Name>
					<Abstract type="html">One of the Items involved in the contacts.</Abstract>
				</Parameter><Parameter>
					<Name>secondItem</Name>
					<Abstract type="html">The other Item involved in the contacts.</Abstract>
				</Parameter><Parameter>
					<Name>action</Name>
					<Abstract type="html">A JSValue representing a function in JavaScript code that
will be called when contact is detected.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized instance of Contact.</Abstract></ReturnValue>
			<Anchor>//api/name/contactWithFirstItem:secondItem:action:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Contact/contactWithArray:</TokenIdentifier>
			<Abstract type="html">Creates a Contact based on the given array. The array should have the firstItem
in its first position, the secondItem in its second position and the action in
its third position - everything else is ignored.</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>- (instancetype)contactWithArray:(NSArray *)array</Declaration>
			<Parameters>
				<Parameter>
					<Name>array</Name>
					<Abstract type="html">The array with the Contact&apos;s info.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized instance of Contact.</Abstract></ReturnValue>
			<Anchor>//api/name/contactWithArray:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Contact/contactWithDictionary:</TokenIdentifier>
			<Abstract type="html">Creates a Contact based on the given dictionary. The dictionary should have the
firstItem in its &quot;between&quot; key, the secondItem in its &quot;and&quot; key and the action
in its &quot;contact&quot; key - everything else is ignored. Ideally, it would be used by
JavaScript in this way:</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>- (instancetype)contactWithDictionary:(NSDictionary *)dictionary</Declaration>
			<Parameters>
				<Parameter>
					<Name>dictionary</Name>
					<Abstract type="html">The dictionary with the Contact&apos;s info.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized instance of Contact.</Abstract></ReturnValue>
			<Anchor>//api/name/contactWithDictionary:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Contact/contactWithObject:</TokenIdentifier>
			<Abstract type="html">Attempts to create a Contact with the given object. This method accepts
NSArrays (which are initialized using @p -initWithArray) and NSDictionaries
(which are initialized using @p -initWithDictionary).</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>- (instancetype)contactWithObject:(id)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object with the Contact&apos;s info.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized instance of Contact.</Abstract></ReturnValue>
			<Anchor>//api/name/contactWithObject:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Contact/setKey:</TokenIdentifier>
			<Abstract type="html">Returns a key meant to be used as an NSDictionary key. This key ignores the
order of the Contact&apos;s Items (which is the firstItem and which is the
secondItem, so that contacts between the same two Items always get mapped to
the same object.</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;NSCopying&gt; key</Declaration>
			
			
			<Anchor>//api/name/key</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Contact/key</TokenIdentifier>
			<Abstract type="html">Returns a key meant to be used as an NSDictionary key. This key ignores the
order of the Contact&apos;s Items (which is the firstItem and which is the
secondItem, so that contacts between the same two Items always get mapped to
the same object.</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;NSCopying&gt; key</Declaration>
			
			
			<Anchor>//api/name/key</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Contact/key</TokenIdentifier>
			<Abstract type="html">Returns a key meant to be used as an NSDictionary key. This key ignores the
order of the Contact&apos;s Items (which is the firstItem and which is the
secondItem, so that contacts between the same two Items always get mapped to
the same object.</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;NSCopying&gt; key</Declaration>
			
			
			<Anchor>//api/name/key</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Contact/setAction:</TokenIdentifier>
			<Abstract type="html">The action to be triggered when a contact occurs between the @p firstObject and
the @p secondObject.</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) JSValue *action</Declaration>
			
			
			<Anchor>//api/name/action</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Contact/action</TokenIdentifier>
			<Abstract type="html">The action to be triggered when a contact occurs between the @p firstObject and
the @p secondObject.</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) JSValue *action</Declaration>
			
			
			<Anchor>//api/name/action</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Contact/action</TokenIdentifier>
			<Abstract type="html">The action to be triggered when a contact occurs between the @p firstObject and
the @p secondObject.</Abstract>
			<DeclaredIn>Contact.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) JSValue *action</Declaration>
			
			
			<Anchor>//api/name/action</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
        
        
	</File>
</Tokens>