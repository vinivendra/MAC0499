<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/Rotation.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/Rotation</TokenIdentifier>
			<Abstract type="html">Represents a rotation by a determined angle around a determined axis.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
            
			
			<NodeRef refid="18"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Rotation/rotationWithX:Y:Z:Angle:</TokenIdentifier>
			<Abstract type="html">Creates a Rotation whith the four given components, respectively.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>+ (Rotation *)rotationWithX:(CGFloat)x Y:(CGFloat)y Z:(CGFloat)z Angle:(CGFloat)angle</Declaration>
			<Parameters>
				<Parameter>
					<Name>x</Name>
					<Abstract type="html">The value to assign to the Rotation&apos;s Axis&apos;s x component.</Abstract>
				</Parameter><Parameter>
					<Name>y</Name>
					<Abstract type="html">The value to assign to the Rotation&apos;s Axis&apos;s y component.</Abstract>
				</Parameter><Parameter>
					<Name>z</Name>
					<Abstract type="html">The value to assign to the Rotation&apos;s Axis&apos;s z component.</Abstract>
				</Parameter><Parameter>
					<Name>angle</Name>
					<Abstract type="html">The value to assign to the Rotation&apos;s Angle component.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized Rotation object.</Abstract></ReturnValue>
			<Anchor>//api/name/rotationWithX:Y:Z:Angle:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Rotation/rotationWithSCNVector4:</TokenIdentifier>
			<Abstract type="html">Creates a Rotation in which all components are set as just as the given
SCNVector4. This initialization is a lot like @p -initWithArray.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/Rotation/y</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (instancetype)rotationWithSCNVector4:(SCNVector4)vector</Declaration>
			<Parameters>
				<Parameter>
					<Name>vector</Name>
					<Abstract type="html">The SCNVector4 that should be used as a model.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized Rotation object.</Abstract></ReturnValue>
			<Anchor>//api/name/rotationWithSCNVector4:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Rotation/rotationWithAxis:angle:</TokenIdentifier>
			<Abstract type="html">Creates a Rotation of @p angle radians around the given @p axis.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>+ (instancetype)rotationWithAxis:(Axis *)axis angle:(Angle *)angle</Declaration>
			<Parameters>
				<Parameter>
					<Name>axis</Name>
					<Abstract type="html">The Axis around which to rotate.</Abstract>
				</Parameter><Parameter>
					<Name>angle</Name>
					<Abstract type="html">The Angle by which to rotate.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized Rotation object.</Abstract></ReturnValue>
			<Anchor>//api/name/rotationWithAxis:angle:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Rotation/rotationWithString:</TokenIdentifier>
			<Abstract type="html">Attempts to initialize a Vector by scanning the string for numbers. Each number
found is inserted into an array, and then the @p initWithArray: method is
used.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>+ (instancetype)rotationWithString:(NSString *)string</Declaration>
			<Parameters>
				<Parameter>
					<Name>string</Name>
					<Abstract type="html">The NSString in which to search for the information.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized Vector object.</Abstract></ReturnValue>
			<Anchor>//api/name/rotationWithString:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Rotation/rotationWithArray:</TokenIdentifier>
			<Abstract type="html">Creates a Rotation based on the given NSArray. Trusts that the array has enough
(4 or more) components, and that the first 4 components may be cast into @p
NSNumbers.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>+ (instancetype)rotationWithArray:(NSArray *)array</Declaration>
			<Parameters>
				<Parameter>
					<Name>array</Name>
					<Abstract type="html">The array representing the rotation.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized Rotation object.</Abstract></ReturnValue>
			<Anchor>//api/name/rotationWithArray:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Rotation/rotationWithDictionary:</TokenIdentifier>
			<Abstract type="html">Creates a Rotation based on the elements on a given NSDictionary. If there are
elements with the key &quot;x&quot;, &quot;y&quot; and &quot;z&quot;(case insensitive), those elements are
used for the axis; &quot;a&quot; or &quot;w&quot; is used for the angle. If one of them is missing,
the corresponding &quot;0&quot;, &quot;1&quot; or &quot;2&quot; is used instead for the axis, and &quot;3&quot; for the
angle. If any elements are still missing, the corresponding value is set to
0.0.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>+ (instancetype)rotationWithDictionary:(NSDictionary *)dictionary</Declaration>
			<Parameters>
				<Parameter>
					<Name>array</Name>
					<Abstract type="html">The dictionary from which to get the information.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized Rotation object.</Abstract></ReturnValue>
			<Anchor>//api/name/rotationWithDictionary:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Rotation/rotationWithRotation:</TokenIdentifier>
			<Abstract type="html">Returns the given Rotation object. Used for completion and standardization by
other methods.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>+ (instancetype)rotationWithRotation:(Rotation *)rotation</Declaration>
			<Parameters>
				<Parameter>
					<Name>rotation</Name>
					<Abstract type="html">The Rotation object that will be returned.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A Rotation object.</Abstract></ReturnValue>
			<Anchor>//api/name/rotationWithRotation:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Rotation/rotationWithObject:</TokenIdentifier>
			<Abstract type="html">Creates a Rotation based on the given object. The supported objects are:
- NSArray, which will be initialized just like @p -initWithArray.
- NSValue containing a SCNVector4, which will be initialized just like @p
-initWithSCNVector4.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/Rotation/y</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (instancetype)rotationWithObject:(id)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object of any one of the classes mentioned above.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized Rotation object.</Abstract></ReturnValue>
			<Anchor>//api/name/rotationWithObject:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/initWithSCNVector4:</TokenIdentifier>
			<Abstract type="html">Creates a Rotation in which all components are set as just as the given
SCNVector4. This initialization is a lot like @p -initWithArray.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/Rotation/y</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (instancetype)initWithSCNVector4:(SCNVector4)vector</Declaration>
			<Parameters>
				<Parameter>
					<Name>vector</Name>
					<Abstract type="html">The SCNVector4 that should be used as a model.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized Rotation object.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithSCNVector4:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/initWithAxis:angle:</TokenIdentifier>
			<Abstract type="html">Creates a Rotation of @p angle radians around the given @p axis.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithAxis:(Axis *)axis angle:(Angle *)angle</Declaration>
			<Parameters>
				<Parameter>
					<Name>axis</Name>
					<Abstract type="html">The Axis around which to rotate.</Abstract>
				</Parameter><Parameter>
					<Name>angle</Name>
					<Abstract type="html">The Angle by which to rotate.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized Rotation object.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithAxis:angle:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/initWithString:</TokenIdentifier>
			<Abstract type="html">Attempts to initialize a Vector by scanning the string for numbers. Each number
found is inserted into an array, and then the @p initWithArray: method is
used.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithString:(NSString *)string</Declaration>
			<Parameters>
				<Parameter>
					<Name>string</Name>
					<Abstract type="html">The NSString in which to search for the information.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized Vector object.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithString:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/initWithArray:</TokenIdentifier>
			<Abstract type="html">Creates a Rotation based on the given NSArray. Trusts that the array has enough
(4 or more) components, and that the first 4 components may be cast into @p
NSNumbers.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithArray:(NSArray *)array</Declaration>
			<Parameters>
				<Parameter>
					<Name>array</Name>
					<Abstract type="html">The array representing the rotation.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized Rotation object.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithArray:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/initWithDictionary:</TokenIdentifier>
			<Abstract type="html">Creates a Rotation based on the elements on a given NSDictionary. If there are
elements with the key &quot;x&quot;, &quot;y&quot; and &quot;z&quot;(case insensitive), those elements are
used for the axis; &quot;a&quot; or &quot;w&quot; is used for the angle. If one of them is missing,
the corresponding &quot;0&quot;, &quot;1&quot; or &quot;2&quot; is used instead for the axis, and &quot;3&quot; for the
angle. If any elements are still missing, the corresponding value is set to
0.0.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithDictionary:(NSDictionary *)dictionary</Declaration>
			<Parameters>
				<Parameter>
					<Name>array</Name>
					<Abstract type="html">The dictionary from which to get the information.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized Rotation object.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithDictionary:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/initWithRotation:</TokenIdentifier>
			<Abstract type="html">Initializes the receiver to copy the given rotation, such that is has the same
values for its axis and angle.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithRotation:(Rotation *)rotation</Declaration>
			<Parameters>
				<Parameter>
					<Name>rotation</Name>
					<Abstract type="html">The rotation from which to copy information.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized Rotation object.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithRotation:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/initWithObject:</TokenIdentifier>
			<Abstract type="html">Creates a Rotation based on the given object. The supported objects are:</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/Rotation/y</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (instancetype)initWithObject:(id)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object of any one of the classes mentioned above.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized Rotation object.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithObject:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/rotateMatrix:</TokenIdentifier>
			<Abstract type="html">The receiver applies the rotation it represents to the receiving SCNMatrix4,
and then returns the result.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>- (SCNMatrix4)rotateMatrix:(SCNMatrix4)matrix</Declaration>
			<Parameters>
				<Parameter>
					<Name>matrix</Name>
					<Abstract type="html">The matrix to rotate.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new SCNMatrix4, representing the result of the rotation of the
original matrix.</Abstract></ReturnValue>
			<Anchor>//api/name/rotateMatrix:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/rotate:</TokenIdentifier>
			<Abstract type="html">Creates a new Vector from the given object by calling [Vector initWithObject:].
That Vector is then rotated by the rotation that the receiver represents.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>- (Vector *)rotate:(id)vector</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object, used to initialize a new Vector to be rotated.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new intance of a Vector object.</Abstract></ReturnValue>
			<Anchor>//api/name/rotate:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/setToSCNVector:</TokenIdentifier>
			<Abstract type="html">Returns a representation of the Rotation as an SCNVector4. The Rotation&apos;s Axis
will be represented in the first three components (x y z, while the angle will
be in the last component (w). This is the most common representation, ready to
be used with SceneKit.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) SCNVector4 toSCNVector</Declaration>
			
			<ReturnValue><Abstract type="html">An initialized SCNVector4.</Abstract></ReturnValue>
			<Anchor>//api/name/toSCNVector</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/toSCNVector</TokenIdentifier>
			<Abstract type="html">Returns a representation of the Rotation as an SCNVector4. The Rotation&apos;s Axis
will be represented in the first three components (x y z, while the angle will
be in the last component (w). This is the most common representation, ready to
be used with SceneKit.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) SCNVector4 toSCNVector</Declaration>
			
			<ReturnValue><Abstract type="html">An initialized SCNVector4.</Abstract></ReturnValue>
			<Anchor>//api/name/toSCNVector</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Rotation/toSCNVector</TokenIdentifier>
			<Abstract type="html">Returns a representation of the Rotation as an SCNVector4. The Rotation&apos;s Axis
will be represented in the first three components (x y z, while the angle will
be in the last component (w). This is the most common representation, ready to
be used with SceneKit.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) SCNVector4 toSCNVector</Declaration>
			
			<ReturnValue><Abstract type="html">An initialized SCNVector4.</Abstract></ReturnValue>
			<Anchor>//api/name/toSCNVector</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/setToSCNMatrix:</TokenIdentifier>
			<Abstract type="html">Returns an SCNMatrix4 representing the same rotation as the receiver.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) SCNMatrix4 toSCNMatrix</Declaration>
			
			<ReturnValue><Abstract type="html">An initialized SCNMatrix4.</Abstract></ReturnValue>
			<Anchor>//api/name/toSCNMatrix</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/toSCNMatrix</TokenIdentifier>
			<Abstract type="html">Returns an SCNMatrix4 representing the same rotation as the receiver.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) SCNMatrix4 toSCNMatrix</Declaration>
			
			<ReturnValue><Abstract type="html">An initialized SCNMatrix4.</Abstract></ReturnValue>
			<Anchor>//api/name/toSCNMatrix</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Rotation/toSCNMatrix</TokenIdentifier>
			<Abstract type="html">Returns an SCNMatrix4 representing the same rotation as the receiver.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) SCNMatrix4 toSCNMatrix</Declaration>
			
			<ReturnValue><Abstract type="html">An initialized SCNMatrix4.</Abstract></ReturnValue>
			<Anchor>//api/name/toSCNMatrix</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/setX:</TokenIdentifier>
			<Abstract type="html">The x component of the axis around which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGFloat x</Declaration>
			
			
			<Anchor>//api/name/x</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/x</TokenIdentifier>
			<Abstract type="html">The x component of the axis around which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGFloat x</Declaration>
			
			
			<Anchor>//api/name/x</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Rotation/x</TokenIdentifier>
			<Abstract type="html">The x component of the axis around which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGFloat x</Declaration>
			
			
			<Anchor>//api/name/x</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/setY:</TokenIdentifier>
			<Abstract type="html">The y component of the axis around which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGFloat y</Declaration>
			
			
			<Anchor>//api/name/y</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/y</TokenIdentifier>
			<Abstract type="html">The y component of the axis around which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGFloat y</Declaration>
			
			
			<Anchor>//api/name/y</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Rotation/y</TokenIdentifier>
			<Abstract type="html">The y component of the axis around which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGFloat y</Declaration>
			
			
			<Anchor>//api/name/y</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/setZ:</TokenIdentifier>
			<Abstract type="html">The z component of the axis around which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGFloat z</Declaration>
			
			
			<Anchor>//api/name/z</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/z</TokenIdentifier>
			<Abstract type="html">The z component of the axis around which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGFloat z</Declaration>
			
			
			<Anchor>//api/name/z</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Rotation/z</TokenIdentifier>
			<Abstract type="html">The z component of the axis around which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGFloat z</Declaration>
			
			
			<Anchor>//api/name/z</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/setA:</TokenIdentifier>
			<Abstract type="html">The value of the angle by which the rotation is being done, in radians.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGFloat a</Declaration>
			
			
			<Anchor>//api/name/a</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/a</TokenIdentifier>
			<Abstract type="html">The value of the angle by which the rotation is being done, in radians.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGFloat a</Declaration>
			
			
			<Anchor>//api/name/a</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Rotation/a</TokenIdentifier>
			<Abstract type="html">The value of the angle by which the rotation is being done, in radians.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGFloat a</Declaration>
			
			
			<Anchor>//api/name/a</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/setAxis:</TokenIdentifier>
			<Abstract type="html">The axis around which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) Axis *axis</Declaration>
			
			
			<Anchor>//api/name/axis</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/axis</TokenIdentifier>
			<Abstract type="html">The axis around which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) Axis *axis</Declaration>
			
			
			<Anchor>//api/name/axis</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Rotation/axis</TokenIdentifier>
			<Abstract type="html">The axis around which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) Axis *axis</Declaration>
			
			
			<Anchor>//api/name/axis</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/setAngle:</TokenIdentifier>
			<Abstract type="html">The angle by which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) Angle *angle</Declaration>
			
			
			<Anchor>//api/name/angle</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Rotation/angle</TokenIdentifier>
			<Abstract type="html">The angle by which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) Angle *angle</Declaration>
			
			
			<Anchor>//api/name/angle</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Rotation/angle</TokenIdentifier>
			<Abstract type="html">The angle by which the rotation is being done.</Abstract>
			<DeclaredIn>Rotation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) Angle *angle</Declaration>
			
			
			<Anchor>//api/name/angle</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
        
        
	</File>
</Tokens>