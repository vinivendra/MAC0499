<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/Item.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/Item</TokenIdentifier>
			<Abstract type="html">An &quot;abstract&quot; superclass for all graphic items. This includes anything that
could be in the game world - from objects and meshes to lights, cameras, etc.
Basically, it&apos;s a wrapper for @p SCNNode.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
            
			
			<NodeRef refid="11"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Item/create</TokenIdentifier>
			<Abstract type="html">Used as a constructor for JavaScript. Creates an empty Item, with an empty
node, and adds the node to the scene.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>+ (instancetype)create</Declaration>
			
			<ReturnValue><Abstract type="html">An empty Item.</Abstract></ReturnValue>
			<Anchor>//api/name/create</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/create</TokenIdentifier>
			<Abstract type="html">Used to create instances of templates, which are added to the scene.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>- (instancetype)create</Declaration>
			
			<ReturnValue><Abstract type="html">A deep copy of the item, which is basically an instance of the
template.</Abstract></ReturnValue>
			<Anchor>//api/name/create</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Item/template</TokenIdentifier>
			<Abstract type="html">Creates a template for the creation of new items. Equivalent to creating a new
Item, but that Item isn&apos;t added to the scene.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>+ (instancetype)template</Declaration>
			
			<ReturnValue><Abstract type="html">An empty Item.</Abstract></ReturnValue>
			<Anchor>//api/name/template</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Item/newID</TokenIdentifier>
			<Abstract type="html">Creates a new unique ID to be used by a new instance of Item.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>+ (NSUInteger)newID</Declaration>
			
			<ReturnValue><Abstract type="html">A new ID.</Abstract></ReturnValue>
			<Anchor>//api/name/newID</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/destroy</TokenIdentifier>
			<Abstract type="html">Must be called whenever an item should disappear, since Items and
their Nodes
create retain-cycles.
This method removes the Item&apos;s Node (and all its subnodes) from the Scene Graph
and readies the Item for destruction.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>- (void)destroy</Declaration>
			
			
			<Anchor>//api/name/destroy</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/deepCopy</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>- (Item *)deepCopy</Declaration>
			
			
			<Anchor>//api/name/deepCopy</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/copyInfoTo:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>- (void)copyInfoTo:(Item *)item</Declaration>
			
			
			<Anchor>//api/name/copyInfoTo:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/addItem:</TokenIdentifier>
			<Abstract type="html">Adds a child item to the receiver&apos;s hierarchy, just as a child node would be.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>- (void)addItem:(Item *)newItem</Declaration>
			<Parameters>
				<Parameter>
					<Name>newItem</Name>
					<Abstract type="html">The child Item to be added.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addItem:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/removeFromParent</TokenIdentifier>
			<Abstract type="html">Removes the receiver from its parent&apos;s hierarchy, just like a node.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>- (void)removeFromParent</Declaration>
			
			
			<Anchor>//api/name/removeFromParent</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/rotate:</TokenIdentifier>
			<Abstract type="html">Creates a Rotation object from the given id object, then applies the resulting
rotation to the receiver. The rotation is applied on top of the receiver&apos;s
existing transform, so that it is concatenated on top of any existing rotation
the receiver may have.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>- (void)rotate:(id)rotation</Declaration>
			<Parameters>
				<Parameter>
					<Name>rotation</Name>
					<Abstract type="html">A Rotation object, representing the change that should be
applied to the receiver.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/rotate:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/setID:</TokenIdentifier>
			<Abstract type="html">An integer used to uniquely identify an Item.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSUInteger ID</Declaration>
			
			
			<Anchor>//api/name/ID</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/ID</TokenIdentifier>
			<Abstract type="html">An integer used to uniquely identify an Item.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSUInteger ID</Declaration>
			
			
			<Anchor>//api/name/ID</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Item/ID</TokenIdentifier>
			<Abstract type="html">An integer used to uniquely identify an Item.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSUInteger ID</Declaration>
			
			
			<Anchor>//api/name/ID</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/setNode:</TokenIdentifier>
			<Abstract type="html">The node that this Item is wrapping.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SCNNode *node</Declaration>
			
			
			<Anchor>//api/name/node</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/node</TokenIdentifier>
			<Abstract type="html">The node that this Item is wrapping.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SCNNode *node</Declaration>
			
			
			<Anchor>//api/name/node</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Item/node</TokenIdentifier>
			<Abstract type="html">The node that this Item is wrapping.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SCNNode *node</Declaration>
			
			
			<Anchor>//api/name/node</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/setPosition:</TokenIdentifier>
			<Abstract type="html">An alias for this Item&apos;s node&apos;s position. The object itself is a Position
object. The setter accepts any object valid for the Position&apos;s  @p
-initWithObject: method, including a Position object that may be initialized in
other ways. The getter always returns a Position object. Attempting to set an
invalid object triggers an @p assert(false).</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id position</Declaration>
			
			
			<Anchor>//api/name/position</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/position</TokenIdentifier>
			<Abstract type="html">An alias for this Item&apos;s node&apos;s position. The object itself is a Position
object. The setter accepts any object valid for the Position&apos;s  @p
-initWithObject: method, including a Position object that may be initialized in
other ways. The getter always returns a Position object. Attempting to set an
invalid object triggers an @p assert(false).</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id position</Declaration>
			
			
			<Anchor>//api/name/position</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Item/position</TokenIdentifier>
			<Abstract type="html">An alias for this Item&apos;s node&apos;s position. The object itself is a Position
object. The setter accepts any object valid for the Position&apos;s  @p
-initWithObject: method, including a Position object that may be initialized in
other ways. The getter always returns a Position object. Attempting to set an
invalid object triggers an @p assert(false).</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id position</Declaration>
			
			
			<Anchor>//api/name/position</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/setRotation:</TokenIdentifier>
			<Abstract type="html">An alias for this Item&apos;s node&apos;s rotation. The object itself is a Rotation
object. The setter accepts any object valid for the Rotation&apos;s  @p
-initWithObject: method, including a Rotation object that may be initialized in
other ways. The getter always returns a Rotation object. Attempting to set an
invalid object triggers an @p assert(false).</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id rotation</Declaration>
			
			
			<Anchor>//api/name/rotation</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/rotation</TokenIdentifier>
			<Abstract type="html">An alias for this Item&apos;s node&apos;s rotation. The object itself is a Rotation
object. The setter accepts any object valid for the Rotation&apos;s  @p
-initWithObject: method, including a Rotation object that may be initialized in
other ways. The getter always returns a Rotation object. Attempting to set an
invalid object triggers an @p assert(false).</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id rotation</Declaration>
			
			
			<Anchor>//api/name/rotation</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Item/rotation</TokenIdentifier>
			<Abstract type="html">An alias for this Item&apos;s node&apos;s rotation. The object itself is a Rotation
object. The setter accepts any object valid for the Rotation&apos;s  @p
-initWithObject: method, including a Rotation object that may be initialized in
other ways. The getter always returns a Rotation object. Attempting to set an
invalid object triggers an @p assert(false).</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id rotation</Declaration>
			
			
			<Anchor>//api/name/rotation</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/setScale:</TokenIdentifier>
			<Abstract type="html">An alias for this Item&apos;s node&apos;s scale. The object itself is a Vector object.
The setter accepts any object valid for the Vector&apos;s  @p -initWithObject:
method, including a Vector object that may be initialized in other ways. The
getter always returns a Vector object. Attempting to set an invalid object
triggers an @p assert(false).</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id scale</Declaration>
			
			
			<Anchor>//api/name/scale</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/scale</TokenIdentifier>
			<Abstract type="html">An alias for this Item&apos;s node&apos;s scale. The object itself is a Vector object.
The setter accepts any object valid for the Vector&apos;s  @p -initWithObject:
method, including a Vector object that may be initialized in other ways. The
getter always returns a Vector object. Attempting to set an invalid object
triggers an @p assert(false).</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id scale</Declaration>
			
			
			<Anchor>//api/name/scale</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Item/scale</TokenIdentifier>
			<Abstract type="html">An alias for this Item&apos;s node&apos;s scale. The object itself is a Vector object.
The setter accepts any object valid for the Vector&apos;s  @p -initWithObject:
method, including a Vector object that may be initialized in other ways. The
getter always returns a Vector object. Attempting to set an invalid object
triggers an @p assert(false).</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id scale</Declaration>
			
			
			<Anchor>//api/name/scale</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/setGeometry:</TokenIdentifier>
			<Abstract type="html">An alias for this Item&apos;s node&apos;s geometry.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SCNGeometry *geometry</Declaration>
			
			
			<Anchor>//api/name/geometry</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/geometry</TokenIdentifier>
			<Abstract type="html">An alias for this Item&apos;s node&apos;s geometry.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SCNGeometry *geometry</Declaration>
			
			
			<Anchor>//api/name/geometry</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Item/geometry</TokenIdentifier>
			<Abstract type="html">An alias for this Item&apos;s node&apos;s geometry.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SCNGeometry *geometry</Declaration>
			
			
			<Anchor>//api/name/geometry</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/setChildren:</TokenIdentifier>
			<Abstract type="html">The item&apos;s child items, which are equivalent to a node&apos;s child nodes. Should
not be handled manually; use @p addItem and @p removeFromParent instead.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSMutableArray *children</Declaration>
			
			
			<Anchor>//api/name/children</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/children</TokenIdentifier>
			<Abstract type="html">The item&apos;s child items, which are equivalent to a node&apos;s child nodes. Should
not be handled manually; use @p addItem and @p removeFromParent instead.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSMutableArray *children</Declaration>
			
			
			<Anchor>//api/name/children</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Item/children</TokenIdentifier>
			<Abstract type="html">The item&apos;s child items, which are equivalent to a node&apos;s child nodes. Should
not be handled manually; use @p addItem and @p removeFromParent instead.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSMutableArray *children</Declaration>
			
			
			<Anchor>//api/name/children</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/setParent:</TokenIdentifier>
			<Abstract type="html">The item&apos;s parent item, equivalent to a node&apos;s parent node.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak, readonly) Item *parent</Declaration>
			
			
			<Anchor>//api/name/parent</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Item/parent</TokenIdentifier>
			<Abstract type="html">The item&apos;s parent item, equivalent to a node&apos;s parent node.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak, readonly) Item *parent</Declaration>
			
			
			<Anchor>//api/name/parent</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Item/parent</TokenIdentifier>
			<Abstract type="html">The item&apos;s parent item, equivalent to a node&apos;s parent node.</Abstract>
			<DeclaredIn>Item.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak, readonly) Item *parent</Declaration>
			
			
			<Anchor>//api/name/parent</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
        
        
	</File>
</Tokens>